// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VarifyServiceClient is the client API for VarifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VarifyServiceClient interface {
	GetVarifyCode(ctx context.Context, in *GetVarifyReq, opts ...grpc.CallOption) (*GetVarifyRsp, error)
}

type varifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVarifyServiceClient(cc grpc.ClientConnInterface) VarifyServiceClient {
	return &varifyServiceClient{cc}
}

func (c *varifyServiceClient) GetVarifyCode(ctx context.Context, in *GetVarifyReq, opts ...grpc.CallOption) (*GetVarifyRsp, error) {
	out := new(GetVarifyRsp)
	err := c.cc.Invoke(ctx, "/message.VarifyService/GetVarifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VarifyServiceServer is the server API for VarifyService service.
// All implementations must embed UnimplementedVarifyServiceServer
// for forward compatibility
type VarifyServiceServer interface {
	GetVarifyCode(context.Context, *GetVarifyReq) (*GetVarifyRsp, error)
	mustEmbedUnimplementedVarifyServiceServer()
}

// UnimplementedVarifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVarifyServiceServer struct {
}

func (UnimplementedVarifyServiceServer) GetVarifyCode(context.Context, *GetVarifyReq) (*GetVarifyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVarifyCode not implemented")
}
func (UnimplementedVarifyServiceServer) mustEmbedUnimplementedVarifyServiceServer() {}

// UnsafeVarifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VarifyServiceServer will
// result in compilation errors.
type UnsafeVarifyServiceServer interface {
	mustEmbedUnimplementedVarifyServiceServer()
}

func RegisterVarifyServiceServer(s *grpc.Server, srv VarifyServiceServer) {
	s.RegisterService(&_VarifyService_serviceDesc, srv)
}

func _VarifyService_GetVarifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVarifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VarifyServiceServer).GetVarifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.VarifyService/GetVarifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VarifyServiceServer).GetVarifyCode(ctx, req.(*GetVarifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VarifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.VarifyService",
	HandlerType: (*VarifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVarifyCode",
			Handler:    _VarifyService_GetVarifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusServiceClient interface {
	GetChatServer(ctx context.Context, in *GetChatServerReq, opts ...grpc.CallOption) (*GetChatServerRsp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) GetChatServer(ctx context.Context, in *GetChatServerReq, opts ...grpc.CallOption) (*GetChatServerRsp, error) {
	out := new(GetChatServerRsp)
	err := c.cc.Invoke(ctx, "/message.StatusService/GetChatServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/message.StatusService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
// All implementations must embed UnimplementedStatusServiceServer
// for forward compatibility
type StatusServiceServer interface {
	GetChatServer(context.Context, *GetChatServerReq) (*GetChatServerRsp, error)
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	mustEmbedUnimplementedStatusServiceServer()
}

// UnimplementedStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (UnimplementedStatusServiceServer) GetChatServer(context.Context, *GetChatServerReq) (*GetChatServerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatServer not implemented")
}
func (UnimplementedStatusServiceServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStatusServiceServer) mustEmbedUnimplementedStatusServiceServer() {}

// UnsafeStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServiceServer will
// result in compilation errors.
type UnsafeStatusServiceServer interface {
	mustEmbedUnimplementedStatusServiceServer()
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_GetChatServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetChatServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.StatusService/GetChatServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetChatServer(ctx, req.(*GetChatServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.StatusService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatServer",
			Handler:    _StatusService_GetChatServer_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StatusService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
