// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AddFriendReq;
struct AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
struct AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class AuthFriendReq;
struct AuthFriendReqDefaultTypeInternal;
extern AuthFriendReqDefaultTypeInternal _AuthFriendReq_default_instance_;
class AuthFriendRsp;
struct AuthFriendRspDefaultTypeInternal;
extern AuthFriendRspDefaultTypeInternal _AuthFriendRsp_default_instance_;
class GetChatServerReq;
struct GetChatServerReqDefaultTypeInternal;
extern GetChatServerReqDefaultTypeInternal _GetChatServerReq_default_instance_;
class GetChatServerRsp;
struct GetChatServerRspDefaultTypeInternal;
extern GetChatServerRspDefaultTypeInternal _GetChatServerRsp_default_instance_;
class GetVarifyReq;
struct GetVarifyReqDefaultTypeInternal;
extern GetVarifyReqDefaultTypeInternal _GetVarifyReq_default_instance_;
class GetVarifyRsp;
struct GetVarifyRspDefaultTypeInternal;
extern GetVarifyRspDefaultTypeInternal _GetVarifyRsp_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
struct LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class RplyFriendReq;
struct RplyFriendReqDefaultTypeInternal;
extern RplyFriendReqDefaultTypeInternal _RplyFriendReq_default_instance_;
class RplyFriendRsp;
struct RplyFriendRspDefaultTypeInternal;
extern RplyFriendRspDefaultTypeInternal _RplyFriendRsp_default_instance_;
class SendChatMsgReq;
struct SendChatMsgReqDefaultTypeInternal;
extern SendChatMsgReqDefaultTypeInternal _SendChatMsgReq_default_instance_;
class SendChatMsgRsp;
struct SendChatMsgRspDefaultTypeInternal;
extern SendChatMsgRspDefaultTypeInternal _SendChatMsgRsp_default_instance_;
class TextChatData;
struct TextChatDataDefaultTypeInternal;
extern TextChatDataDefaultTypeInternal _TextChatData_default_instance_;
class TextChatMsgReq;
struct TextChatMsgReqDefaultTypeInternal;
extern TextChatMsgReqDefaultTypeInternal _TextChatMsgReq_default_instance_;
class TextChatMsgRsp;
struct TextChatMsgRspDefaultTypeInternal;
extern TextChatMsgRspDefaultTypeInternal _TextChatMsgRsp_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AddFriendReq* Arena::CreateMaybeMessage<::message::AddFriendReq>(Arena*);
template<> ::message::AddFriendRsp* Arena::CreateMaybeMessage<::message::AddFriendRsp>(Arena*);
template<> ::message::AuthFriendReq* Arena::CreateMaybeMessage<::message::AuthFriendReq>(Arena*);
template<> ::message::AuthFriendRsp* Arena::CreateMaybeMessage<::message::AuthFriendRsp>(Arena*);
template<> ::message::GetChatServerReq* Arena::CreateMaybeMessage<::message::GetChatServerReq>(Arena*);
template<> ::message::GetChatServerRsp* Arena::CreateMaybeMessage<::message::GetChatServerRsp>(Arena*);
template<> ::message::GetVarifyReq* Arena::CreateMaybeMessage<::message::GetVarifyReq>(Arena*);
template<> ::message::GetVarifyRsp* Arena::CreateMaybeMessage<::message::GetVarifyRsp>(Arena*);
template<> ::message::LoginReq* Arena::CreateMaybeMessage<::message::LoginReq>(Arena*);
template<> ::message::LoginRsp* Arena::CreateMaybeMessage<::message::LoginRsp>(Arena*);
template<> ::message::RplyFriendReq* Arena::CreateMaybeMessage<::message::RplyFriendReq>(Arena*);
template<> ::message::RplyFriendRsp* Arena::CreateMaybeMessage<::message::RplyFriendRsp>(Arena*);
template<> ::message::SendChatMsgReq* Arena::CreateMaybeMessage<::message::SendChatMsgReq>(Arena*);
template<> ::message::SendChatMsgRsp* Arena::CreateMaybeMessage<::message::SendChatMsgRsp>(Arena*);
template<> ::message::TextChatData* Arena::CreateMaybeMessage<::message::TextChatData>(Arena*);
template<> ::message::TextChatMsgReq* Arena::CreateMaybeMessage<::message::TextChatMsgReq>(Arena*);
template<> ::message::TextChatMsgRsp* Arena::CreateMaybeMessage<::message::TextChatMsgRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class GetVarifyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVarifyReq) */ {
 public:
  inline GetVarifyReq() : GetVarifyReq(nullptr) {}
  ~GetVarifyReq() override;
  explicit PROTOBUF_CONSTEXPR GetVarifyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVarifyReq(const GetVarifyReq& from);
  GetVarifyReq(GetVarifyReq&& from) noexcept
    : GetVarifyReq() {
    *this = ::std::move(from);
  }

  inline GetVarifyReq& operator=(const GetVarifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVarifyReq& operator=(GetVarifyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVarifyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVarifyReq* internal_default_instance() {
    return reinterpret_cast<const GetVarifyReq*>(
               &_GetVarifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVarifyReq& a, GetVarifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVarifyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVarifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVarifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVarifyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVarifyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVarifyReq& from) {
    GetVarifyReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVarifyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVarifyReq";
  }
  protected:
  explicit GetVarifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:message.GetVarifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetVarifyRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVarifyRsp) */ {
 public:
  inline GetVarifyRsp() : GetVarifyRsp(nullptr) {}
  ~GetVarifyRsp() override;
  explicit PROTOBUF_CONSTEXPR GetVarifyRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVarifyRsp(const GetVarifyRsp& from);
  GetVarifyRsp(GetVarifyRsp&& from) noexcept
    : GetVarifyRsp() {
    *this = ::std::move(from);
  }

  inline GetVarifyRsp& operator=(const GetVarifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVarifyRsp& operator=(GetVarifyRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVarifyRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVarifyRsp* internal_default_instance() {
    return reinterpret_cast<const GetVarifyRsp*>(
               &_GetVarifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetVarifyRsp& a, GetVarifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVarifyRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVarifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVarifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVarifyRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVarifyRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVarifyRsp& from) {
    GetVarifyRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVarifyRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVarifyRsp";
  }
  protected:
  explicit GetVarifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kCodeFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetVarifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetChatServerReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetChatServerReq) */ {
 public:
  inline GetChatServerReq() : GetChatServerReq(nullptr) {}
  ~GetChatServerReq() override;
  explicit PROTOBUF_CONSTEXPR GetChatServerReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatServerReq(const GetChatServerReq& from);
  GetChatServerReq(GetChatServerReq&& from) noexcept
    : GetChatServerReq() {
    *this = ::std::move(from);
  }

  inline GetChatServerReq& operator=(const GetChatServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatServerReq& operator=(GetChatServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatServerReq* internal_default_instance() {
    return reinterpret_cast<const GetChatServerReq*>(
               &_GetChatServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetChatServerReq& a, GetChatServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatServerReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatServerReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatServerReq& from) {
    GetChatServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatServerReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetChatServerReq";
  }
  protected:
  explicit GetChatServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetChatServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetChatServerRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetChatServerRsp) */ {
 public:
  inline GetChatServerRsp() : GetChatServerRsp(nullptr) {}
  ~GetChatServerRsp() override;
  explicit PROTOBUF_CONSTEXPR GetChatServerRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatServerRsp(const GetChatServerRsp& from);
  GetChatServerRsp(GetChatServerRsp&& from) noexcept
    : GetChatServerRsp() {
    *this = ::std::move(from);
  }

  inline GetChatServerRsp& operator=(const GetChatServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatServerRsp& operator=(GetChatServerRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatServerRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatServerRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatServerRsp*>(
               &_GetChatServerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetChatServerRsp& a, GetChatServerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatServerRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatServerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatServerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatServerRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatServerRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatServerRsp& from) {
    GetChatServerRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatServerRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetChatServerRsp";
  }
  protected:
  explicit GetChatServerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
    kTokenFieldNumber = 4,
    kErrorFieldNumber = 1,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetChatServerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginReq& from) {
    LoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 uid = 1;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  ~LoginRsp() override;
  explicit PROTOBUF_CONSTEXPR LoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRsp& from) {
    LoginRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 uid = 2;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t error_;
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AddFriendReq) */ {
 public:
  inline AddFriendReq() : AddFriendReq(nullptr) {}
  ~AddFriendReq() override;
  explicit PROTOBUF_CONSTEXPR AddFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendReq(const AddFriendReq& from);
  AddFriendReq(AddFriendReq&& from) noexcept
    : AddFriendReq() {
    *this = ::std::move(from);
  }

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
               &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddFriendReq& a, AddFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendReq& from) {
    AddFriendReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AddFriendReq";
  }
  protected:
  explicit AddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kApplyuidFieldNumber = 1,
    kTouidFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 applyuid = 1;
  void clear_applyuid();
  int32_t applyuid() const;
  void set_applyuid(int32_t value);
  private:
  int32_t _internal_applyuid() const;
  void _internal_set_applyuid(int32_t value);
  public:

  // int32 touid = 4;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AddFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int32_t applyuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AddFriendRsp) */ {
 public:
  inline AddFriendRsp() : AddFriendRsp(nullptr) {}
  ~AddFriendRsp() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRsp(const AddFriendRsp& from);
  AddFriendRsp(AddFriendRsp&& from) noexcept
    : AddFriendRsp() {
    *this = ::std::move(from);
  }

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
               &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddFriendRsp& a, AddFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendRsp& from) {
    AddFriendRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AddFriendRsp";
  }
  protected:
  explicit AddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kApplyuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 applyuid = 2;
  void clear_applyuid();
  int32_t applyuid() const;
  void set_applyuid(int32_t value);
  private:
  int32_t _internal_applyuid() const;
  void _internal_set_applyuid(int32_t value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AddFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t applyuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RplyFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RplyFriendReq) */ {
 public:
  inline RplyFriendReq() : RplyFriendReq(nullptr) {}
  ~RplyFriendReq() override;
  explicit PROTOBUF_CONSTEXPR RplyFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RplyFriendReq(const RplyFriendReq& from);
  RplyFriendReq(RplyFriendReq&& from) noexcept
    : RplyFriendReq() {
    *this = ::std::move(from);
  }

  inline RplyFriendReq& operator=(const RplyFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RplyFriendReq& operator=(RplyFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RplyFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RplyFriendReq* internal_default_instance() {
    return reinterpret_cast<const RplyFriendReq*>(
               &_RplyFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RplyFriendReq& a, RplyFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RplyFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RplyFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RplyFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RplyFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RplyFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RplyFriendReq& from) {
    RplyFriendReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RplyFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RplyFriendReq";
  }
  protected:
  explicit RplyFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplyuidFieldNumber = 1,
    kAgreeFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 rplyuid = 1;
  void clear_rplyuid();
  int32_t rplyuid() const;
  void set_rplyuid(int32_t value);
  private:
  int32_t _internal_rplyuid() const;
  void _internal_set_rplyuid(int32_t value);
  public:

  // bool agree = 2;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RplyFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t rplyuid_;
    bool agree_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RplyFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RplyFriendRsp) */ {
 public:
  inline RplyFriendRsp() : RplyFriendRsp(nullptr) {}
  ~RplyFriendRsp() override;
  explicit PROTOBUF_CONSTEXPR RplyFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RplyFriendRsp(const RplyFriendRsp& from);
  RplyFriendRsp(RplyFriendRsp&& from) noexcept
    : RplyFriendRsp() {
    *this = ::std::move(from);
  }

  inline RplyFriendRsp& operator=(const RplyFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RplyFriendRsp& operator=(RplyFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RplyFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RplyFriendRsp* internal_default_instance() {
    return reinterpret_cast<const RplyFriendRsp*>(
               &_RplyFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RplyFriendRsp& a, RplyFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RplyFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RplyFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RplyFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RplyFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RplyFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RplyFriendRsp& from) {
    RplyFriendRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RplyFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RplyFriendRsp";
  }
  protected:
  explicit RplyFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kRplyuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 rplyuid = 2;
  void clear_rplyuid();
  int32_t rplyuid() const;
  void set_rplyuid(int32_t value);
  private:
  int32_t _internal_rplyuid() const;
  void _internal_set_rplyuid(int32_t value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RplyFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t rplyuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChatMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChatMsgReq) */ {
 public:
  inline SendChatMsgReq() : SendChatMsgReq(nullptr) {}
  ~SendChatMsgReq() override;
  explicit PROTOBUF_CONSTEXPR SendChatMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChatMsgReq(const SendChatMsgReq& from);
  SendChatMsgReq(SendChatMsgReq&& from) noexcept
    : SendChatMsgReq() {
    *this = ::std::move(from);
  }

  inline SendChatMsgReq& operator=(const SendChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatMsgReq& operator=(SendChatMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChatMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatMsgReq* internal_default_instance() {
    return reinterpret_cast<const SendChatMsgReq*>(
               &_SendChatMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendChatMsgReq& a, SendChatMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChatMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendChatMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendChatMsgReq& from) {
    SendChatMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChatMsgReq";
  }
  protected:
  explicit SendChatMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kFromuidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 fromuid = 1;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 2;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChatMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChatMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChatMsgRsp) */ {
 public:
  inline SendChatMsgRsp() : SendChatMsgRsp(nullptr) {}
  ~SendChatMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR SendChatMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChatMsgRsp(const SendChatMsgRsp& from);
  SendChatMsgRsp(SendChatMsgRsp&& from) noexcept
    : SendChatMsgRsp() {
    *this = ::std::move(from);
  }

  inline SendChatMsgRsp& operator=(const SendChatMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatMsgRsp& operator=(SendChatMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChatMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SendChatMsgRsp*>(
               &_SendChatMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendChatMsgRsp& a, SendChatMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChatMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendChatMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendChatMsgRsp& from) {
    SendChatMsgRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChatMsgRsp";
  }
  protected:
  explicit SendChatMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kFromuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 fromuid = 2;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChatMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthFriendReq) */ {
 public:
  inline AuthFriendReq() : AuthFriendReq(nullptr) {}
  ~AuthFriendReq() override;
  explicit PROTOBUF_CONSTEXPR AuthFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthFriendReq(const AuthFriendReq& from);
  AuthFriendReq(AuthFriendReq&& from) noexcept
    : AuthFriendReq() {
    *this = ::std::move(from);
  }

  inline AuthFriendReq& operator=(const AuthFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendReq& operator=(AuthFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthFriendReq* internal_default_instance() {
    return reinterpret_cast<const AuthFriendReq*>(
               &_AuthFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AuthFriendReq& a, AuthFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthFriendReq& from) {
    AuthFriendReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthFriendReq";
  }
  protected:
  explicit AuthFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromuidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // int32 fromuid = 1;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 2;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthFriendRsp) */ {
 public:
  inline AuthFriendRsp() : AuthFriendRsp(nullptr) {}
  ~AuthFriendRsp() override;
  explicit PROTOBUF_CONSTEXPR AuthFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthFriendRsp(const AuthFriendRsp& from);
  AuthFriendRsp(AuthFriendRsp&& from) noexcept
    : AuthFriendRsp() {
    *this = ::std::move(from);
  }

  inline AuthFriendRsp& operator=(const AuthFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendRsp& operator=(AuthFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AuthFriendRsp*>(
               &_AuthFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AuthFriendRsp& a, AuthFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthFriendRsp& from) {
    AuthFriendRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthFriendRsp";
  }
  protected:
  explicit AuthFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kFromuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 fromuid = 2;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatMsgReq) */ {
 public:
  inline TextChatMsgReq() : TextChatMsgReq(nullptr) {}
  ~TextChatMsgReq() override;
  explicit PROTOBUF_CONSTEXPR TextChatMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatMsgReq(const TextChatMsgReq& from);
  TextChatMsgReq(TextChatMsgReq&& from) noexcept
    : TextChatMsgReq() {
    *this = ::std::move(from);
  }

  inline TextChatMsgReq& operator=(const TextChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMsgReq& operator=(TextChatMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatMsgReq* internal_default_instance() {
    return reinterpret_cast<const TextChatMsgReq*>(
               &_TextChatMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TextChatMsgReq& a, TextChatMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChatMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextChatMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextChatMsgReq& from) {
    TextChatMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatMsgReq";
  }
  protected:
  explicit TextChatMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextmsgsFieldNumber = 3,
    kFromuidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // repeated .message.TextChatData textmsgs = 3;
  int textmsgs_size() const;
  private:
  int _internal_textmsgs_size() const;
  public:
  void clear_textmsgs();
  ::message::TextChatData* mutable_textmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
      mutable_textmsgs();
  private:
  const ::message::TextChatData& _internal_textmsgs(int index) const;
  ::message::TextChatData* _internal_add_textmsgs();
  public:
  const ::message::TextChatData& textmsgs(int index) const;
  ::message::TextChatData* add_textmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
      textmsgs() const;

  // int32 fromuid = 1;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 2;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData > textmsgs_;
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatData) */ {
 public:
  inline TextChatData() : TextChatData(nullptr) {}
  ~TextChatData() override;
  explicit PROTOBUF_CONSTEXPR TextChatData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatData(const TextChatData& from);
  TextChatData(TextChatData&& from) noexcept
    : TextChatData() {
    *this = ::std::move(from);
  }

  inline TextChatData& operator=(const TextChatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatData& operator=(TextChatData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatData* internal_default_instance() {
    return reinterpret_cast<const TextChatData*>(
               &_TextChatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TextChatData& a, TextChatData& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChatData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextChatData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextChatData& from) {
    TextChatData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatData";
  }
  protected:
  explicit TextChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgidFieldNumber = 1,
    kMsgcontentFieldNumber = 2,
  };
  // string msgid = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string msgcontent = 2;
  void clear_msgcontent();
  const std::string& msgcontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgcontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgcontent();
  PROTOBUF_NODISCARD std::string* release_msgcontent();
  void set_allocated_msgcontent(std::string* msgcontent);
  private:
  const std::string& _internal_msgcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgcontent(const std::string& value);
  std::string* _internal_mutable_msgcontent();
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgcontent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatMsgRsp) */ {
 public:
  inline TextChatMsgRsp() : TextChatMsgRsp(nullptr) {}
  ~TextChatMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR TextChatMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatMsgRsp(const TextChatMsgRsp& from);
  TextChatMsgRsp(TextChatMsgRsp&& from) noexcept
    : TextChatMsgRsp() {
    *this = ::std::move(from);
  }

  inline TextChatMsgRsp& operator=(const TextChatMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMsgRsp& operator=(TextChatMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatMsgRsp* internal_default_instance() {
    return reinterpret_cast<const TextChatMsgRsp*>(
               &_TextChatMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TextChatMsgRsp& a, TextChatMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChatMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextChatMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextChatMsgRsp& from) {
    TextChatMsgRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatMsgRsp";
  }
  protected:
  explicit TextChatMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextmsgsFieldNumber = 4,
    kErrorFieldNumber = 1,
    kFromuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // repeated .message.TextChatData textmsgs = 4;
  int textmsgs_size() const;
  private:
  int _internal_textmsgs_size() const;
  public:
  void clear_textmsgs();
  ::message::TextChatData* mutable_textmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
      mutable_textmsgs();
  private:
  const ::message::TextChatData& _internal_textmsgs(int index) const;
  ::message::TextChatData* _internal_add_textmsgs();
  public:
  const ::message::TextChatData& textmsgs(int index) const;
  ::message::TextChatData* add_textmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
      textmsgs() const;

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 fromuid = 2;
  void clear_fromuid();
  int32_t fromuid() const;
  void set_fromuid(int32_t value);
  private:
  int32_t _internal_fromuid() const;
  void _internal_set_fromuid(int32_t value);
  public:

  // int32 touid = 3;
  void clear_touid();
  int32_t touid() const;
  void set_touid(int32_t value);
  private:
  int32_t _internal_touid() const;
  void _internal_set_touid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData > textmsgs_;
    int32_t error_;
    int32_t fromuid_;
    int32_t touid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVarifyReq

// string email = 1;
inline void GetVarifyReq::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& GetVarifyReq::email() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyReq.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVarifyReq::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVarifyReq.email)
}
inline std::string* GetVarifyReq::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:message.GetVarifyReq.email)
  return _s;
}
inline const std::string& GetVarifyReq::_internal_email() const {
  return _impl_.email_.Get();
}
inline void GetVarifyReq::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVarifyReq::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVarifyReq::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVarifyReq.email)
  return _impl_.email_.Release();
}
inline void GetVarifyReq::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyReq.email)
}

// -------------------------------------------------------------------

// GetVarifyRsp

// int32 error = 1;
inline void GetVarifyRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t GetVarifyRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t GetVarifyRsp::error() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.error)
  return _internal_error();
}
inline void GetVarifyRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void GetVarifyRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.error)
}

// string email = 2;
inline void GetVarifyRsp::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& GetVarifyRsp::email() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVarifyRsp::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.email)
}
inline std::string* GetVarifyRsp::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:message.GetVarifyRsp.email)
  return _s;
}
inline const std::string& GetVarifyRsp::_internal_email() const {
  return _impl_.email_.Get();
}
inline void GetVarifyRsp::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVarifyRsp::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVarifyRsp::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVarifyRsp.email)
  return _impl_.email_.Release();
}
inline void GetVarifyRsp::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyRsp.email)
}

// string code = 3;
inline void GetVarifyRsp::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& GetVarifyRsp::code() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVarifyRsp::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.code)
}
inline std::string* GetVarifyRsp::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:message.GetVarifyRsp.code)
  return _s;
}
inline const std::string& GetVarifyRsp::_internal_code() const {
  return _impl_.code_.Get();
}
inline void GetVarifyRsp::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVarifyRsp::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVarifyRsp::release_code() {
  // @@protoc_insertion_point(field_release:message.GetVarifyRsp.code)
  return _impl_.code_.Release();
}
inline void GetVarifyRsp::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyRsp.code)
}

// -------------------------------------------------------------------

// GetChatServerReq

// int32 uid = 1;
inline void GetChatServerReq::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t GetChatServerReq::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t GetChatServerReq::uid() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerReq.uid)
  return _internal_uid();
}
inline void GetChatServerReq::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void GetChatServerReq::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerReq.uid)
}

// -------------------------------------------------------------------

// GetChatServerRsp

// int32 error = 1;
inline void GetChatServerRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t GetChatServerRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t GetChatServerRsp::error() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.error)
  return _internal_error();
}
inline void GetChatServerRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void GetChatServerRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.error)
}

// string host = 2;
inline void GetChatServerRsp::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& GetChatServerRsp::host() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatServerRsp::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.host)
}
inline std::string* GetChatServerRsp::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.host)
  return _s;
}
inline const std::string& GetChatServerRsp::_internal_host() const {
  return _impl_.host_.Get();
}
inline void GetChatServerRsp::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::release_host() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.host)
  return _impl_.host_.Release();
}
inline void GetChatServerRsp::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.host)
}

// string port = 3;
inline void GetChatServerRsp::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& GetChatServerRsp::port() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatServerRsp::set_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.port)
}
inline std::string* GetChatServerRsp::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.port)
  return _s;
}
inline const std::string& GetChatServerRsp::_internal_port() const {
  return _impl_.port_.Get();
}
inline void GetChatServerRsp::_internal_set_port(const std::string& value) {
  
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::_internal_mutable_port() {
  
  return _impl_.port_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::release_port() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.port)
  return _impl_.port_.Release();
}
inline void GetChatServerRsp::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  _impl_.port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.port)
}

// string token = 4;
inline void GetChatServerRsp::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& GetChatServerRsp::token() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatServerRsp::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.token)
}
inline std::string* GetChatServerRsp::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.token)
  return _s;
}
inline const std::string& GetChatServerRsp::_internal_token() const {
  return _impl_.token_.Get();
}
inline void GetChatServerRsp::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatServerRsp::release_token() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.token)
  return _impl_.token_.Release();
}
inline void GetChatServerRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.token)
}

// -------------------------------------------------------------------

// LoginReq

// int32 uid = 1;
inline void LoginReq::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t LoginReq::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t LoginReq::uid() const {
  // @@protoc_insertion_point(field_get:message.LoginReq.uid)
  return _internal_uid();
}
inline void LoginReq::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void LoginReq::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.LoginReq.uid)
}

// string token = 2;
inline void LoginReq::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:message.LoginReq.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginReq.token)
}
inline std::string* LoginReq::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.LoginReq.token)
  return _s;
}
inline const std::string& LoginReq::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LoginReq::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:message.LoginReq.token)
  return _impl_.token_.Release();
}
inline void LoginReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginReq.token)
}

// -------------------------------------------------------------------

// LoginRsp

// int32 error = 1;
inline void LoginRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t LoginRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t LoginRsp::error() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.error)
  return _internal_error();
}
inline void LoginRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void LoginRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.LoginRsp.error)
}

// int32 uid = 2;
inline void LoginRsp::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t LoginRsp::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t LoginRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.uid)
  return _internal_uid();
}
inline void LoginRsp::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void LoginRsp::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.LoginRsp.uid)
}

// string token = 3;
inline void LoginRsp::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginRsp::token() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRsp::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginRsp.token)
}
inline std::string* LoginRsp::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.LoginRsp.token)
  return _s;
}
inline const std::string& LoginRsp::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LoginRsp::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRsp::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRsp::release_token() {
  // @@protoc_insertion_point(field_release:message.LoginRsp.token)
  return _impl_.token_.Release();
}
inline void LoginRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginRsp.token)
}

// -------------------------------------------------------------------

// AddFriendReq

// int32 applyuid = 1;
inline void AddFriendReq::clear_applyuid() {
  _impl_.applyuid_ = 0;
}
inline int32_t AddFriendReq::_internal_applyuid() const {
  return _impl_.applyuid_;
}
inline int32_t AddFriendReq::applyuid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.applyuid)
  return _internal_applyuid();
}
inline void AddFriendReq::_internal_set_applyuid(int32_t value) {
  
  _impl_.applyuid_ = value;
}
inline void AddFriendReq::set_applyuid(int32_t value) {
  _internal_set_applyuid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.applyuid)
}

// string name = 2;
inline void AddFriendReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AddFriendReq::name() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.AddFriendReq.name)
}
inline std::string* AddFriendReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.AddFriendReq.name)
  return _s;
}
inline const std::string& AddFriendReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AddFriendReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendReq::release_name() {
  // @@protoc_insertion_point(field_release:message.AddFriendReq.name)
  return _impl_.name_.Release();
}
inline void AddFriendReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.AddFriendReq.name)
}

// string desc = 3;
inline void AddFriendReq::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& AddFriendReq::desc() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendReq::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.AddFriendReq.desc)
}
inline std::string* AddFriendReq::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:message.AddFriendReq.desc)
  return _s;
}
inline const std::string& AddFriendReq::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void AddFriendReq::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendReq::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendReq::release_desc() {
  // @@protoc_insertion_point(field_release:message.AddFriendReq.desc)
  return _impl_.desc_.Release();
}
inline void AddFriendReq::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.AddFriendReq.desc)
}

// int32 touid = 4;
inline void AddFriendReq::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t AddFriendReq::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t AddFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.touid)
  return _internal_touid();
}
inline void AddFriendReq::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void AddFriendReq::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.touid)
}

// -------------------------------------------------------------------

// AddFriendRsp

// int32 error = 1;
inline void AddFriendRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t AddFriendRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t AddFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.error)
  return _internal_error();
}
inline void AddFriendRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void AddFriendRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.error)
}

// int32 applyuid = 2;
inline void AddFriendRsp::clear_applyuid() {
  _impl_.applyuid_ = 0;
}
inline int32_t AddFriendRsp::_internal_applyuid() const {
  return _impl_.applyuid_;
}
inline int32_t AddFriendRsp::applyuid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.applyuid)
  return _internal_applyuid();
}
inline void AddFriendRsp::_internal_set_applyuid(int32_t value) {
  
  _impl_.applyuid_ = value;
}
inline void AddFriendRsp::set_applyuid(int32_t value) {
  _internal_set_applyuid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.applyuid)
}

// int32 touid = 3;
inline void AddFriendRsp::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t AddFriendRsp::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t AddFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.touid)
  return _internal_touid();
}
inline void AddFriendRsp::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void AddFriendRsp::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.touid)
}

// -------------------------------------------------------------------

// RplyFriendReq

// int32 rplyuid = 1;
inline void RplyFriendReq::clear_rplyuid() {
  _impl_.rplyuid_ = 0;
}
inline int32_t RplyFriendReq::_internal_rplyuid() const {
  return _impl_.rplyuid_;
}
inline int32_t RplyFriendReq::rplyuid() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendReq.rplyuid)
  return _internal_rplyuid();
}
inline void RplyFriendReq::_internal_set_rplyuid(int32_t value) {
  
  _impl_.rplyuid_ = value;
}
inline void RplyFriendReq::set_rplyuid(int32_t value) {
  _internal_set_rplyuid(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendReq.rplyuid)
}

// bool agree = 2;
inline void RplyFriendReq::clear_agree() {
  _impl_.agree_ = false;
}
inline bool RplyFriendReq::_internal_agree() const {
  return _impl_.agree_;
}
inline bool RplyFriendReq::agree() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendReq.agree)
  return _internal_agree();
}
inline void RplyFriendReq::_internal_set_agree(bool value) {
  
  _impl_.agree_ = value;
}
inline void RplyFriendReq::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendReq.agree)
}

// int32 touid = 3;
inline void RplyFriendReq::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t RplyFriendReq::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t RplyFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendReq.touid)
  return _internal_touid();
}
inline void RplyFriendReq::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void RplyFriendReq::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendReq.touid)
}

// -------------------------------------------------------------------

// RplyFriendRsp

// int32 error = 1;
inline void RplyFriendRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t RplyFriendRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t RplyFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendRsp.error)
  return _internal_error();
}
inline void RplyFriendRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void RplyFriendRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendRsp.error)
}

// int32 rplyuid = 2;
inline void RplyFriendRsp::clear_rplyuid() {
  _impl_.rplyuid_ = 0;
}
inline int32_t RplyFriendRsp::_internal_rplyuid() const {
  return _impl_.rplyuid_;
}
inline int32_t RplyFriendRsp::rplyuid() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendRsp.rplyuid)
  return _internal_rplyuid();
}
inline void RplyFriendRsp::_internal_set_rplyuid(int32_t value) {
  
  _impl_.rplyuid_ = value;
}
inline void RplyFriendRsp::set_rplyuid(int32_t value) {
  _internal_set_rplyuid(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendRsp.rplyuid)
}

// int32 touid = 3;
inline void RplyFriendRsp::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t RplyFriendRsp::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t RplyFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.RplyFriendRsp.touid)
  return _internal_touid();
}
inline void RplyFriendRsp::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void RplyFriendRsp::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.RplyFriendRsp.touid)
}

// -------------------------------------------------------------------

// SendChatMsgReq

// int32 fromuid = 1;
inline void SendChatMsgReq::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t SendChatMsgReq::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t SendChatMsgReq::fromuid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgReq.fromuid)
  return _internal_fromuid();
}
inline void SendChatMsgReq::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void SendChatMsgReq::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMsgReq.fromuid)
}

// int32 touid = 2;
inline void SendChatMsgReq::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t SendChatMsgReq::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t SendChatMsgReq::touid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgReq.touid)
  return _internal_touid();
}
inline void SendChatMsgReq::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void SendChatMsgReq::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMsgReq.touid)
}

// string message = 3;
inline void SendChatMsgReq::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SendChatMsgReq::message() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgReq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendChatMsgReq::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SendChatMsgReq.message)
}
inline std::string* SendChatMsgReq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:message.SendChatMsgReq.message)
  return _s;
}
inline const std::string& SendChatMsgReq::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SendChatMsgReq::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SendChatMsgReq::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SendChatMsgReq::release_message() {
  // @@protoc_insertion_point(field_release:message.SendChatMsgReq.message)
  return _impl_.message_.Release();
}
inline void SendChatMsgReq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SendChatMsgReq.message)
}

// -------------------------------------------------------------------

// SendChatMsgRsp

// int32 error = 1;
inline void SendChatMsgRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t SendChatMsgRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t SendChatMsgRsp::error() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgRsp.error)
  return _internal_error();
}
inline void SendChatMsgRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void SendChatMsgRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.SendChatMsgRsp.error)
}

// int32 fromuid = 2;
inline void SendChatMsgRsp::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t SendChatMsgRsp::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t SendChatMsgRsp::fromuid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgRsp.fromuid)
  return _internal_fromuid();
}
inline void SendChatMsgRsp::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void SendChatMsgRsp::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMsgRsp.fromuid)
}

// int32 touid = 3;
inline void SendChatMsgRsp::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t SendChatMsgRsp::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t SendChatMsgRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMsgRsp.touid)
  return _internal_touid();
}
inline void SendChatMsgRsp::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void SendChatMsgRsp::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMsgRsp.touid)
}

// -------------------------------------------------------------------

// AuthFriendReq

// int32 fromuid = 1;
inline void AuthFriendReq::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t AuthFriendReq::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t AuthFriendReq::fromuid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendReq.fromuid)
  return _internal_fromuid();
}
inline void AuthFriendReq::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void AuthFriendReq::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendReq.fromuid)
}

// int32 touid = 2;
inline void AuthFriendReq::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t AuthFriendReq::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t AuthFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendReq.touid)
  return _internal_touid();
}
inline void AuthFriendReq::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void AuthFriendReq::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendReq.touid)
}

// -------------------------------------------------------------------

// AuthFriendRsp

// int32 error = 1;
inline void AuthFriendRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t AuthFriendRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t AuthFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.error)
  return _internal_error();
}
inline void AuthFriendRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void AuthFriendRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.error)
}

// int32 fromuid = 2;
inline void AuthFriendRsp::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t AuthFriendRsp::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t AuthFriendRsp::fromuid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.fromuid)
  return _internal_fromuid();
}
inline void AuthFriendRsp::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void AuthFriendRsp::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.fromuid)
}

// int32 touid = 3;
inline void AuthFriendRsp::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t AuthFriendRsp::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t AuthFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.touid)
  return _internal_touid();
}
inline void AuthFriendRsp::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void AuthFriendRsp::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.touid)
}

// -------------------------------------------------------------------

// TextChatMsgReq

// int32 fromuid = 1;
inline void TextChatMsgReq::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t TextChatMsgReq::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t TextChatMsgReq::fromuid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgReq.fromuid)
  return _internal_fromuid();
}
inline void TextChatMsgReq::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void TextChatMsgReq::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMsgReq.fromuid)
}

// int32 touid = 2;
inline void TextChatMsgReq::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t TextChatMsgReq::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t TextChatMsgReq::touid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgReq.touid)
  return _internal_touid();
}
inline void TextChatMsgReq::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void TextChatMsgReq::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMsgReq.touid)
}

// repeated .message.TextChatData textmsgs = 3;
inline int TextChatMsgReq::_internal_textmsgs_size() const {
  return _impl_.textmsgs_.size();
}
inline int TextChatMsgReq::textmsgs_size() const {
  return _internal_textmsgs_size();
}
inline void TextChatMsgReq::clear_textmsgs() {
  _impl_.textmsgs_.Clear();
}
inline ::message::TextChatData* TextChatMsgReq::mutable_textmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:message.TextChatMsgReq.textmsgs)
  return _impl_.textmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
TextChatMsgReq::mutable_textmsgs() {
  // @@protoc_insertion_point(field_mutable_list:message.TextChatMsgReq.textmsgs)
  return &_impl_.textmsgs_;
}
inline const ::message::TextChatData& TextChatMsgReq::_internal_textmsgs(int index) const {
  return _impl_.textmsgs_.Get(index);
}
inline const ::message::TextChatData& TextChatMsgReq::textmsgs(int index) const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgReq.textmsgs)
  return _internal_textmsgs(index);
}
inline ::message::TextChatData* TextChatMsgReq::_internal_add_textmsgs() {
  return _impl_.textmsgs_.Add();
}
inline ::message::TextChatData* TextChatMsgReq::add_textmsgs() {
  ::message::TextChatData* _add = _internal_add_textmsgs();
  // @@protoc_insertion_point(field_add:message.TextChatMsgReq.textmsgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
TextChatMsgReq::textmsgs() const {
  // @@protoc_insertion_point(field_list:message.TextChatMsgReq.textmsgs)
  return _impl_.textmsgs_;
}

// -------------------------------------------------------------------

// TextChatData

// string msgid = 1;
inline void TextChatData::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& TextChatData::msgid() const {
  // @@protoc_insertion_point(field_get:message.TextChatData.msgid)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatData::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.TextChatData.msgid)
}
inline std::string* TextChatData::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:message.TextChatData.msgid)
  return _s;
}
inline const std::string& TextChatData::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void TextChatData::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatData::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatData::release_msgid() {
  // @@protoc_insertion_point(field_release:message.TextChatData.msgid)
  return _impl_.msgid_.Release();
}
inline void TextChatData::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.TextChatData.msgid)
}

// string msgcontent = 2;
inline void TextChatData::clear_msgcontent() {
  _impl_.msgcontent_.ClearToEmpty();
}
inline const std::string& TextChatData::msgcontent() const {
  // @@protoc_insertion_point(field_get:message.TextChatData.msgcontent)
  return _internal_msgcontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatData::set_msgcontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgcontent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.TextChatData.msgcontent)
}
inline std::string* TextChatData::mutable_msgcontent() {
  std::string* _s = _internal_mutable_msgcontent();
  // @@protoc_insertion_point(field_mutable:message.TextChatData.msgcontent)
  return _s;
}
inline const std::string& TextChatData::_internal_msgcontent() const {
  return _impl_.msgcontent_.Get();
}
inline void TextChatData::_internal_set_msgcontent(const std::string& value) {
  
  _impl_.msgcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatData::_internal_mutable_msgcontent() {
  
  return _impl_.msgcontent_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatData::release_msgcontent() {
  // @@protoc_insertion_point(field_release:message.TextChatData.msgcontent)
  return _impl_.msgcontent_.Release();
}
inline void TextChatData::set_allocated_msgcontent(std::string* msgcontent) {
  if (msgcontent != nullptr) {
    
  } else {
    
  }
  _impl_.msgcontent_.SetAllocated(msgcontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgcontent_.IsDefault()) {
    _impl_.msgcontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.TextChatData.msgcontent)
}

// -------------------------------------------------------------------

// TextChatMsgRsp

// int32 error = 1;
inline void TextChatMsgRsp::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t TextChatMsgRsp::_internal_error() const {
  return _impl_.error_;
}
inline int32_t TextChatMsgRsp::error() const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgRsp.error)
  return _internal_error();
}
inline void TextChatMsgRsp::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void TextChatMsgRsp::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.TextChatMsgRsp.error)
}

// int32 fromuid = 2;
inline void TextChatMsgRsp::clear_fromuid() {
  _impl_.fromuid_ = 0;
}
inline int32_t TextChatMsgRsp::_internal_fromuid() const {
  return _impl_.fromuid_;
}
inline int32_t TextChatMsgRsp::fromuid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgRsp.fromuid)
  return _internal_fromuid();
}
inline void TextChatMsgRsp::_internal_set_fromuid(int32_t value) {
  
  _impl_.fromuid_ = value;
}
inline void TextChatMsgRsp::set_fromuid(int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMsgRsp.fromuid)
}

// int32 touid = 3;
inline void TextChatMsgRsp::clear_touid() {
  _impl_.touid_ = 0;
}
inline int32_t TextChatMsgRsp::_internal_touid() const {
  return _impl_.touid_;
}
inline int32_t TextChatMsgRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgRsp.touid)
  return _internal_touid();
}
inline void TextChatMsgRsp::_internal_set_touid(int32_t value) {
  
  _impl_.touid_ = value;
}
inline void TextChatMsgRsp::set_touid(int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMsgRsp.touid)
}

// repeated .message.TextChatData textmsgs = 4;
inline int TextChatMsgRsp::_internal_textmsgs_size() const {
  return _impl_.textmsgs_.size();
}
inline int TextChatMsgRsp::textmsgs_size() const {
  return _internal_textmsgs_size();
}
inline void TextChatMsgRsp::clear_textmsgs() {
  _impl_.textmsgs_.Clear();
}
inline ::message::TextChatData* TextChatMsgRsp::mutable_textmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:message.TextChatMsgRsp.textmsgs)
  return _impl_.textmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
TextChatMsgRsp::mutable_textmsgs() {
  // @@protoc_insertion_point(field_mutable_list:message.TextChatMsgRsp.textmsgs)
  return &_impl_.textmsgs_;
}
inline const ::message::TextChatData& TextChatMsgRsp::_internal_textmsgs(int index) const {
  return _impl_.textmsgs_.Get(index);
}
inline const ::message::TextChatData& TextChatMsgRsp::textmsgs(int index) const {
  // @@protoc_insertion_point(field_get:message.TextChatMsgRsp.textmsgs)
  return _internal_textmsgs(index);
}
inline ::message::TextChatData* TextChatMsgRsp::_internal_add_textmsgs() {
  return _impl_.textmsgs_.Add();
}
inline ::message::TextChatData* TextChatMsgRsp::add_textmsgs() {
  ::message::TextChatData* _add = _internal_add_textmsgs();
  // @@protoc_insertion_point(field_add:message.TextChatMsgRsp.textmsgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
TextChatMsgRsp::textmsgs() const {
  // @@protoc_insertion_point(field_list:message.TextChatMsgRsp.textmsgs)
  return _impl_.textmsgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
